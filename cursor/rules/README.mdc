# Cursor Rules Organization

## Rule Application Strategy

This project uses a **strategic rule organization** that applies different rules based on context and need:

### 🔴 Always Apply (`always-apply/`)
**Non-negotiable core principles** that must always be followed:
- `core-principles.mdc` - The four pillars and absolute requirements
- `typescript-standards.mdc` - TypeScript strict mode and type safety rules

### 🟡 Apply Intelligently (`intelligent/`)
**Context-aware guidance** that Cursor applies based on intelligence:
- `react-patterns.mdc` - React component patterns and best practices
- `api-integration.mdc` - REST/GraphQL/WebSocket patterns for external services

### 🟢 File-Specific (`file-specific/`)
**Targeted rules** for specific file types:
- `components.mdc` - React component files (`.tsx`, `components/**/*.ts`)
- `hooks.mdc` - Custom React hooks (`hooks/**/*.ts`, `*.hook.ts`)
- `tests.mdc` - Test files (`*.test.ts`, `*.spec.ts`, `__tests__/**/*`)

### 🔵 Manual Only (`manual/`)
**Advanced procedures** invoked only when explicitly requested:
- `debugging-procedures.mdc` - Performance, accessibility, and security auditing
- `migration-procedures.mdc` - Component migrations, state management updates, accessibility enhancements

## Four Pillars Framework

All rules are organized around our four core pillars:

1. **🔥 Accessibility** - WCAG 2.1 AA compliance, inclusive design
2. **🔒 Security** - Data protection, secure coding practices  
3. **🛠️ Maintainability** - Code quality, architecture, documentation
4. **🌱 Sustainability** - Performance budgets, green software engineering

## How It Works

### Always Applied Rules
```yaml
# .cursor/rules/always-apply/core-principles.mdc
alwaysApply: true
# These run on every code generation
```

### Intelligent Rules  
```yaml
# .cursor/rules/intelligent/react-patterns.mdc
# No alwaysApply flag - Cursor decides when to apply
```

### File-Specific Rules
```yaml
# .cursor/rules/file-specific/components.mdc
globs: ["**/*.tsx", "**/components/**/*.ts"]
# Only applies to matching files
```

### Manual Rules
```yaml
# .cursor/rules/manual/debugging-procedures.mdc
# Only applies when explicitly invoked
```

## Benefits of This Organization

✅ **Reduces Noise** - No irrelevant rules applied  
✅ **Context-Aware** - Right rules at the right time  
✅ **Performance** - Faster rule processing  
✅ **Maintainable** - Clear separation of concerns  
✅ **Flexible** - Easy to add/modify specific rule types  

## Usage Examples

### For Core Development
- `always-apply/` ensures non-negotiable standards
- `intelligent/` provides React patterns when relevant
- `file-specific/` gives targeted component guidance

### For Debugging/Auditing
- Explicitly invoke `manual/debugging-procedures.mdc`
- Get comprehensive auditing tools and procedures
- Performance profiling and security scanning

### For New Features
- `always-apply/` enforces accessibility and security
- `intelligent/` suggests appropriate patterns
- `file-specific/` provides component-specific guidance

## Migration from Monolithic Rules

The previous single-file approach had everything as `alwaysApply: true`, which was:
- ❌ Too aggressive and noisy
- ❌ Applied irrelevant rules constantly  
- ❌ Made Cursor less intelligent

This new structure allows Cursor to be **smarter** about when and how to apply rules, resulting in better code generation and a smoother development experience.

## Rule Hierarchy

```
Priority: Always > File-Specific > Intelligent > Manual

1. Always Apply rules are checked first (non-negotiable)
2. File-Specific rules apply to matching files  
3. Intelligent rules are context-dependent
4. Manual rules require explicit invocation
```

This ensures core principles are never violated while allowing flexible, context-aware guidance for everything else! 🎯
